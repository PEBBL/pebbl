
include ${top_srcdir}/config/MakeMacros.mk
SUFFIXES=.i

CXXTEST= ${top_srcdir}/../../python/bin/cxxtestgen

if I_AM_SUBPACKAGE
  TOPINC=../../../../include
  TOPLIB=../../../../lib
  TOPBUILDBIN=../../../../bin
else
  TOPINC=$(top_builddir)
  TOPLIB=$(top_builddir)/lib
  TOPBUILDBIN=${top_builddir}/bin
endif

TOPSRCBIN=${top_srcdir}/bin

LDADD=../../src/libutilib.la

#
# Paths to: config.h, other configure headers, utilib headers
#
AM_CPPFLAGS=-I$(TOPINC) -I${top_srcdir}/../../tpl/cxxtest $(TINYXML_INCLUDE) $(BOOST_CPPFLAGS)

if BUILD_STATIC_EXECUTABLES
#
#A libtool flag
#
AM_LDFLAGS=@STATIC_FLAGS@
endif

#
# programs to build at "make check" time
#
check_PROGRAMS = runner


if BUILD_SHARED
  EXECS=$(check_PROGRAMS:%=.libs/%)
else
  EXECS=$(check_PROGRAMS)
endif

BIN_COPIES=$(check_PROGRAMS:%=$(TOPBIN)/%)

# sources autogenerated by cxxtest (and will be removed during 'make clean'
runner_CXXTEST_SRC=\
	TAny.cpp \
	TBitArray.cpp \
	TfSerialStream.cpp \
	TOptionParser.cpp \
	TOStreamTee.cpp \
	TProperty.cpp \
	TPropertyDict.cpp \
	TPropertyDict_YamlPrinter.cpp \
	TReferenceCounted.cpp \
	TSerialize.cpp \
	TSerialStream.cpp \
	TSparseMatrix.cpp \
	Tstring_ops.cpp \
	Tstl_auxiliary.cpp \
	TTuple.cpp \
	TTypeManager.cpp \
	TXMLSerialStream.cpp \
	runner.cpp

runner_STATIC_SRC=

runner_SOURCES=$(runner_STATIC_SRC) $(runner_CXXTEST_SRC)

runner.cpp:
	$(CXXTEST) --have-eh --have-std --root --xunit-printer -w utilib -o runner.cpp --include=runner.h

# Implicit rule to invoke cxxtest to autogenerate .cpp from .h test files
#  [test needed to prevent using cxxtest on non-test sources]
.h.cpp:
	@for x in $(runner_CXXTEST_SRC); do \
		if [ "$$x" = "$@" ]; then \
			echo $(CXXTEST) --have-eh --have-std --part -o $@ $<; \
			$(CXXTEST) --have-eh --have-std --part -o $@ $<; \
		fi \
	done

# prevent implicit rule for static sources
.PHONY:
$(runner_STATIC_SRC):
	@echo NO-OP


check-local:
	@if test -d $(TOPBUILDBIN) ; then : ; else mkdir $(TOPBUILDBIN); fi
	@if test -d $(TOPBUILDBIN)/utilib ; then : ; else mkdir $(TOPBUILDBIN)/utilib; fi
	@$(TOPSRCBIN)/cp_u $(EXECS) $(TOPBUILDBIN)/utilib

clean-local:
	@rm -rf $(TOPBUILDBIN)/utilib $(runner_CXXTEST_SRC)
	rm -f *.gcda *.gcno *.gcov
	@for i in *.gcda *.gcno *.gcov ; \
        do\
                rm -f $$i ;\
        done



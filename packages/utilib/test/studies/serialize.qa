Testing POD data:
                      bool:  0,(--,nn),0: [ OK ]  (1)
                      bool:  0,(--,nn),0: [ OK ]  (0)
                      char:  0,(--,nn),0: [ OK ]  (A)
                   wchar_t:  0,(--,nn),0: [ OK ]  (65)
                       int:  0,(--,nn),0: [ OK ]  (42)
                      long:  0,(--,nn),0: [ OK ]  (123456)
                     float:  0,(--,nn),0: [ OK ]  (3.1415)
                    double:  0,(--,nn),0: [ OK ]  (3.1415)
                    string:  0,(--,nn),0: [ OK ]  (hello, world)
Testing POD data:
                      bool:    (--,nn)  : [ OK ]  (1)
                      bool:    (--,nn)  : [ OK ]  (0)
                      char:    (--,nn)  : [ OK ]  (A)
                   wchar_t:    (--,nn)  : [ OK ]  (66)
                       int:    (--,nn)  : [ OK ]  (42)
                      long:    (--,nn)  : [ OK ]  (123456)
                     float:    (--,nn)  : [ OK ]  (3.1415)
                    double:    (--,nn)  : [ OK ]  (3.1415)
                    string:    (--,nn)  : [ OK ]  (hello, world)
Testing STL:
                 list<int>:  0,(--,C3),0: [ OK ]  ([ 3: 2 4 6 ])
                 list<int>:    (--,C3)  : [ OK ]  ([ 3: 2 4 6 ])
                 list<int>:  0,(--,C0),0: [ OK ]  ([ 0: ])
                 list<int>:    (--,C0)  : [ OK ]  ([ 0: ])
            vector<string>:  0,(--,C2),0: [ OK ]  ([ 2: hello world ])
            vector<string>:    (--,C2)  : [ OK ]  ([ 2: hello world ])
             deque<double>:  0,(--,C3),0: [ OK ]  ([ 3: 1.1 2.2 3.3 ])
             deque<double>:    (--,C3)  : [ OK ]  ([ 3: 1.1 2.2 3.3 ])
             queue<double>:  0,(--,C1),0: [ OK ]  ([ 10.1 20.2 30.3 ])
             queue<double>:    (--,C1)  : [ OK ]  ([ 10.1 20.2 30.3 ])
              queue<float>:  0,(--,C1),0: [ OK ]  ([ 100.1 200.2 300.3 ])
              queue<float>:    (--,C1)  : [ OK ]  ([ 100.1 200.2 300.3 ])
                stack<int>:  0,(--,C1),0: [ OK ]  ([ 5 3 1 ])
                stack<int>:    (--,C1)  : [ OK ]  ([ 5 3 1 ])
       priority_queue<int>:  0,(--,C1),0: [ OK ]  ([ 5 3 1 ])
       priority_queue<int>:    (--,C1)  : [ OK ]  ([ 5 3 1 ])
                  set<int>:  0,(--,C3),0: [ OK ]  ([ 3: 1 3 5 ])
                  set<int>:    (--,C3)  : [ OK ]  ([ 3: 1 3 5 ])
             multiset<int>:  0,(--,C6),0: [ OK ]  ([ 6: 1 3 3 3 5 5 ])
             multiset<int>:    (--,C6)  : [ OK ]  ([ 6: 1 3 3 3 5 5 ])
          map_int_double_t:  0,(--,C3),0: [ OK ]  ([ 3: (1,0.1) (2,0.2) (3,0.3) ])
          map_int_double_t:    (--,C3)  : [ OK ]  ([ 3: (1,0.1) (2,0.2) (3,0.3) ])
     multimap_int_double_t:  0,(--,C6),0: [ OK ]  ([ 6: (1,0.1) (3,0.3) (3,0.31) (3,0.29) (5,0.5) (5,0.5) ])
     multimap_int_double_t:    (--,C6)  : [ OK ]  ([ 6: (1,0.1) (3,0.3) (3,0.31) (3,0.29) (5,0.5) (5,0.5) ])
Testing Utilib ADT:
              Ereal<float>:  0,(--,C2),0: [ OK ]  (5)
              Ereal<float>:    (--,C2)  : [ OK ]  (5)
              Ereal<float>:  0,(--,C2),0: [ OK ]  (Infinity)
              Ereal<float>:    (--,C2)  : [ OK ]  (Infinity)
        BasicArray<double>:  0,(--,C4),0: [ OK ]  ([ 3: 1.1 2.2 3.3 ])
        BasicArray<double>:    (--,C4)  : [ OK ]  ([ 3: 1.1 2.2 3.3 ])
             NumArray<int>:  0,(--,C4),0: [ OK ]  ([ 3: 3 5 7 ])
             NumArray<int>:    (--,C4)  : [ OK ]  ([ 3: 3 5 7 ])
              MixedIntVars:  0,(--,C3),0: [ OK ]  ()
              MixedIntVars:    (--,C3)  : [ OK ]  ()
              MixedIntVars:  0,(--,C3),0: [ OK ]  (b(3 : 0 1 0)  i(3 : 3 5 7)  r(2 : 3.1415 42))
              MixedIntVars:    (--,C3)  : [ OK ]  (b(3 : 0 1 0)  i(3 : 3 5 7)  r(2 : 3.1415 42))
Testing Anys:
                       Any:  0,(--,nn),0: [ OK ]  (5)
                       Any:    (--,nn)  : [ OK ]  (5)
                       Any:  0,(--,nn),0: [ OK ]  (25)
                       Any:    (--,nn)  : [ OK ]  (25)
                       Any:  0,(--,--),0: [ OK ]  ([Empty Any])
                       Any:    (--,--)  : [ OK ]  ([Empty Any])
                       Any:  0,(--,--),0: [ OK ]  ([Empty Any])
Testing nested classes:
                      xx_t:  0,(--,C4),0: [ OK ]  ([ 4: ((1,0.5),[ 0: ]) ((2,1.5),[ 2: h i ]) ((2,2.5),[ 1: ? ]) ((3,33),[ 1: ! ]) ])
                      xx_t:    (--,C4)  : [ OK ]  ([ 4: ((1,0.5),[ 0: ]) ((2,1.5),[ 2: h i ]) ((2,2.5),[ 1: ? ]) ((3,33),[ 1: ! ]) ])
                         A:  0,(--,C3),0: [ OK ]  ({2, 5.5, [ 2: 5.5 5.5 ]})
                         A:    (--,C3)  : [ OK ]  ({2, 5.5, [ 2: 5.5 5.5 ]})
                         B:    (--,C2)  : [ OK ]  ({{1, 1.5, [ 1: 1.5 ]}, {2, 2.5, [ 2: 2.5 2.5 ]}})
SerialObject::print():
   type = B
      type = A
         type = int: 1
         type = float: 1.5
         type = std::list<double,*>
            type = double: 1.5
      type = A
         type = int: 2
         type = float: 2.5
         type = std::list<double,*>
            type = double: 2.5
            type = double: 2.5
SerialObject::print():
   type = B
      type = A
         type = int
            POD: 4: 1 0 0 0
         type = float
            POD: 4: 0 0 192 63
         type = std::list<double,*>
            type = double
               POD: 8: 0 0 0 0 0 0 248 63
      type = A
         type = int
            POD: 4: 2 0 0 0
         type = float
            POD: 4: 0 0 32 64
         type = std::list<double,*>
            type = double
               POD: 8: 0 0 0 0 0 0 4 64
            type = double
               POD: 8: 0 0 0 0 0 0 4 64

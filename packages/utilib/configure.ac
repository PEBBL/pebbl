#
# TODO For BitArrayBase:  Default is not set, code will select a default. 
#    --enable-bit-arrays=byte
#    --enable-bit-arrays=word
# Define BIT_ARRAYS_BY_BYTE or BIT_ARRAYS_BY_WORD
#
# TODO: cleanup tests for linpack library and add it to the link line 
# when building tests
#
# TODO: We probably don't want to error-out on the absence of 
# all these headers. We can work around not having strings.h, etc. 
# Let's wait till we fail on a platform to decide what we want
# to work around.
#
# These were recommended by autoscan.  TODO: Define replacement
# functions for these three if autoconf test decides they
# are faulty, and include AC_LIBOBJ commands to replace them.
#
#AC_FUNC_ERROR_AT_LINE
#AC_FUNC_MALLOC
#AC_FUNC_STRTOD
#


###############################################################
# boilerplate

AC_PREREQ(2.59)
AC_INIT([utilib], [VOTD], [acro-help@software.sandia.gov])


###############################################################
# A file or directory that should be found here, so we know
# we are in the right place.
 
AC_CONFIG_SRCDIR([src/libs/cholesky.cpp])


###############################################################
# Location of our m4 macros.  These test for the features
# we are interested.  This doesn't actually work.  Documentation
# says it will in the future.  We need to define
# ACLOCAL_AMFLAGS in Makefile.am instead.  autoconf looks there
# for some reason.

AC_CONFIG_MACRO_DIR([config])
AC_CONFIG_AUX_DIR([config])

###############################################################
# Create this header file which will help configure our Makefiles
# and source files at build time.

AC_CONFIG_HEADERS([src/config.h])
AX_PREFIX_CONFIG_H([src/utilib_config.h])
AH_TOP([
/*  _________________________________________________________________________
 *
 *  UTILIB: A utility library for developing portable C++ codes.
 *  Copyright (c) 2008 Sandia Corporation.
 *  This software is distributed under the BSD License.
 *  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
 *  the U.S. Government retains certain rights in this software.
 *  For more information, see the README file in the top UTILIB directory.
 *  _________________________________________________________________________
 */

/**
 * \file utilib_config.h
 *
 * A header file for UTILIB configuration options that is generated by
 * autoconf.
 */
])
AH_BOTTOM(
#ifndef UTILIB_HAVE_EXPLICIT
#ifndef explicit
#define explicit
#endif
#endif
)

###############################################################
# Are we using a cache file, and if so does the cache file already
# exist, or is it empty and we are initializing it?

use_ac_cv_env=no
ac_cv_env_empty=yes

if test "$cache_file" != "/dev/null" ; then
  use_ac_cv_env=yes
  if test X$ac_cv_env_CCASFLAGS_set = Xset ; then
    ac_cv_env_empty=no
  fi
fi
                                                 
if test "$ac_cv_env_empty" = "no" ; then
  #
  # Respect cache file settings for CC, CXX, CCFLAGS, etc.
  # We are building as a subpackage of a package which has
  # given us a cache file, or the Acro builder is using a
  # cache file created on a previous run.
  #
  AC_MSG_NOTICE([=====================================================================])
  AC_MSG_NOTICE([Compile environment obtained from cache file.])
  AC_MSG_NOTICE([UTILIB's special options for compile environment])
  AC_MSG_NOTICE([(for example "--with-debugging") will be ignored.])
  AC_MSG_NOTICE([=====================================================================])
fi

###############################################################
# Setup platform information and initialize automake

AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE([-Wall -Werror foreign])

AC_CACHE_SAVE

###############################################################
# Platform ID

ACRO_PLATFORM

###############################################################
# Is utilib being built as part of acro?  If so we will
# copy our library to acro/lib when done.  If not, we'll
# copy it to top_builddir/lib.

if test -d ../../packages ; then
  AM_CONDITIONAL(I_AM_SUBPACKAGE, true)
  ac_cv_subpackage=subpackage
else
  AM_CONDITIONAL(I_AM_SUBPACKAGE, false)
  ac_cv_subpackage=no
fi

###############################################################
# Configure command line options

using_acro_special=no

###############################################################
# Request executables that are linked only with static libraries,
# default is to use shared system libraries when available

ACRO_STATIC_EXECUTABLES



# --with-compiler=mingw
ACRO_COMPILER_OPTION

if test $ac_cv_env_empty = yes ; then
  # Various special options to override compiler flags, sets
  # using_acro_special to yes
  ACRO_COMPILER_OPTIONS
fi
  
# Control whether UTILIB CommonIO mapping is used
ACRO_COMMONIO_OPTION
# Control whether UTILIB DEBUGPR output is used
ACRO_DEBUGPR_OPTION
# Control whether UTILIB memory debugging utilities are used
ACRO_MEMDEBUG_OPTION
# Control whether UTILIB checksum is used
ACRO_CHECKSUM_OPTION
# Control whether executables are built
ACRO_EXECUTABLES_OPTION
# Control wether test codes are built
ACRO_TEST_OPTION
# Control wether code validation is used
ACRO_VALIDATING_OPTION
  
# Various options to setup the use of MPI, sets using_acro_special to yes

AC_ARG_ENABLE(mpi,
AS_HELP_STRING([--enable-mpi],[Enable MPI support]),
[ENABLE_MPI=$enableval],
[ENABLE_MPI=no]
)

if test $ac_cv_env_empty = yes ; then
  ACRO_MPI_OPTIONS
fi
    
#
# Will application using utilib link in linpack? Default is NO.
#
AC_ARG_WITH(linpack,
[AC_HELP_STRING([--with-linpack],[Allow utilib to call linpack functions])],
[WITH_LINPACK=$withval],
[WITH_LINPACK=no]
)

if test X${WITH_LINPACK} = Xyes; then
    AC_DEFINE(YES_LINPACK,,[define whether linpack will be included])
fi

AC_CACHE_SAVE

###############################################################
# Checks for programs

#c_compilers=""
#cpp_compilers=""

if test $ac_cv_env_empty = yes ; then
  temp_cflags=${CFLAGS}
  temp_cxxflags=${CXXFLAGS}
  
  if test "X${MPI_CC}" = "Xnone" ; then
    if test X${USERDEF_CC} = Xnotset ; then
#      if test X$with_vendor_compilers = Xyes ; then
#       c_compilers="icc pgcc xlc cc gcc"
#     else
#       c_compilers="cc gcc"
#     fi
      c_compilers=""
    else
      CC="${USERDEF_CC}"
    fi
  else
    CC="${MPI_CC}" 
  fi
  
  if test "X${MPI_CXX}" = "Xnone" ; then
    if test X${USERDEF_CXX} = Xnotset ; then
      if test X${build_os} = Xcygwin ; then
        cpp_compilers="g++"
      else
#       if test X$with_vendor_compilers = Xyes ; then
#         cpp_compilers="icpc pgCC xlC CC c++ g++"
#       else
#         cpp_compilers="c++ g++"
#       fi
        cpp_compilers=""
      fi
    else
      CXX="${USERDEF_CXX}"
    fi
  else
    CXX="${MPI_CXX}"
  fi
fi

AC_PROG_CC
AC_PROG_CXX

if test $ac_cv_env_empty = yes ; then
  # AC_PROG_CC and AC_PROG_CXX overwrote our flag values
  CFLAGS=${temp_cflags}
  CXXFLAGS=${temp_cxxflags}
fi

AC_PROG_CXXCPP
AC_PROG_LN_S
AM_PROG_AS
m4_ifdef([AM_PROG_AR], [AM_PROG_AR])

AC_CACHE_SAVE

###############################################################
# Platform-specific compiler options

# Setup CXX flags
AC_CXX_COMPILER_VENDOR([CXX_VENDOR])

if test $ac_cv_env_empty = yes ; then
  AC_CXX_CPPFLAGS_STD_LANG([CXXFLAGS])
  ACRO_PLATFORM_COMPILER_FLAGS
fi

AM_CONDITIONAL(HAVE_GNU_COMPILER,false)
AM_CONDITIONAL(HAVE_PGI_COMPILER,false)

if test X$ac_cv_cxx_compiler_vendor = Xpgi ; then
  AM_CONDITIONAL(HAVE_PGI_COMPILER,true)
else
  if test X$ac_cv_cxx_compiler_vendor = Xgnu ; then
    AM_CONDITIONAL(HAVE_GNU_COMPILER,true)
  fi
fi

###############################################################
# Platform specific flags for some Acro source files.

ACRO_PLATFORM_CODE_FLAGS

###############################################################
# Setup compiler flags

if test $ac_cv_env_empty = yes ; then
  ACRO_COMPILER_FLAGS
fi

AC_CACHE_SAVE
###############################################################
# Validate MPI builds

AM_CONDITIONAL(BUILD_MPI, false)

if test $ac_cv_env_empty = yes ; then
#
# Try compiling with MPI, and set BUILD_MPI to true on success.
#
  ACRO_MPI_TESTS
elif test "X$acro_cv_with_mpi_set" = "Xyes" ; then
#
#   We're here if we are configuring from cache variables, and
#   "--with-mpi*=" options were specified previously.  The MPI
#   tests were run previously and succeeded.
#
  AM_CONDITIONAL(BUILD_MPI, true)
  AC_DEFINE(HAVE_MPI,,[define that mpi is being used])
fi

###############################################################
# Checks for libraries

# Configure with boost
AX_BOOST_BASE([1.37],[available])
# Configure with tinyxml
ACX_TINYXML
# Configure with cxxtest
ACX_CXXTEST

###############################################################
# Checks for headers
#

# Define STDC_HEADERS if system has ANSI C header files.  Right
# now we wouldn't be able to compile if this fails.  We can
# fix this if we find platforms without standard C headers.
AC_HEADER_STDC

# Define TIME_WITH_SYS_TIME if system is one where both
# time.h and sys/time.h should be included
AC_HEADER_TIME

# libexpat related options, including
#   makefile condititional USE_EXPAT_LIBRARY if including libexpat
#   makefile variables EXPAT_LIBS, EXPAT_INCDIR, EXPAT_LIBDIR
#   config file macro UTILIB_HAVE_EXPAT_H
#   option --without-expat turns off use of expat even if you have it

ACRO_EXPAT_OPTIONS

# Define HAVE_SYS_TIME_H if this header file exists
AC_CHECK_HEADERS([sys/time.h])

# Define HAVE_TIMEB_H if sys/timeb.h exists.  This is obsolete
# and we'll only use it if we don't find better time functions
AC_CHECK_HEADERS([sys/timeb.h])

AC_CHECK_HEADERS([sys/resource.h])

# Notes on defined max/min constants:
#   We need float.h (which defines FLT_MAX) and limits.h
#   (which defines INT_MAX).  If they don't exist, we will
#   take values.h (which defines MAXINT), which is obsolete.  
#   If none of these exist, we fail.  To be more careful we
#   could also check here if the values we need are defined.
AC_CHECK_HEADERS([float.h limits.h],,[AC_CHECK_HEADERS([values.h],,[AC_MSG_ERROR(missing headers)])])

AC_CHECK_HEADERS([memory.h stddef.h stdlib.h string.h strings.h unistd.h], , [AC_MSG_ERROR(missing headers)])

AC_CHECK_HEADERS([cxxabi.h])

AC_CHECK_HEADERS([windows.h])

AC_CHECK_HEADERS([err.h])

AC_CHECK_HEADERS([dbghelp.h])

AC_CHECK_HEADERS([execinfo.h], [HAVE_EXECINFO=yes], [HAVE_EXECINFO=no])

#
# If the C compiler is gcc, then AC_PROG_CC set GCC=yes
#
if test $HAVE_EXECINFO = yes && test "X$GCC" = "Xyes" && "$host_os" != "Darwin" ; then
  ACRO_ADD(CFLAGS, -rdynamic)
  ACRO_ADD(CXXFLAGS, -rdynamic)
fi

AC_MSG_NOTICE([Warnings about rejection of header files by preprocessor may be IGNORED])

AC_CACHE_SAVE
###############################################################
# Checks for typedefs, structures and compiler behavior

# Defines HAVE_STDBOOL_H.  If not defined we need to include bool
#  information in every source that uses type bool.
AC_HEADER_STDBOOL

# Define "const" to be empty if compiler doesn't support const
AC_C_CONST

# Redefine "inline" if necessary
AC_C_INLINE

# For now, it's an error if size_t is not defined.
AC_CHECK_TYPES([size_t],,[AC_MSG_ERROR(missing size_t)])

#
# TODO - replace ptrdiff_t if it's not defined
#
AC_CHECK_TYPES([ptrdiff_t])

# defines HAVE_LONG_DOUBLE if the long double type exists and
# has more precision than double
# OLD:
#   AC_C_LONG_DOUBLE
# NEW:
#   AC_TYPE_LONG_DOUBLE
#   AC_TYPE_LONG_DOUBLE_WIDER

AC_CACHE_SAVE

###############################################################
# Checks for compiler behavior
#
# AC_CXX_* are checks for C++ behavior
 
# Defines HAVE_NAMESPACES if we can use them
#   TODO - find out if the means std namespace only, or any namespace
#          is it possible we can declare namespaces, but there's no std?
#          Modifying sources to use HAVE_NAMESPACES is not complete
AC_CXX_NAMESPACES

# WEH - turned off because these are not portable
# Defines HAVE_TEMPLATES_AS_TEMPLATE_ARGUMENTS if we can pass a template
# argument in for a template parameter
# AC_CXX_TEMPLATES_AS_TEMPLATE_ARGUMENTS

# Defines HAVE_EXCEPTIONS if we can use throw/catch
AC_CXX_EXCEPTIONS

# Defines HAVE_STD if was can include ISO C++ headers 
# (iostream, map, iomanip and cmath) 
AC_CXX_HAVE_STD

# Define HAVE_SSTREAM if we have stringstreams
AC_CXX_HAVE_SSTREAM

# Define HAVE_EXPLICIT if we can use the explicit keyword
AC_CXX_EXPLICIT

# Define HAVE_MEMBER_TEMPLATES if class member functions can be templated
AC_CXX_MEMBER_TEMPLATES

AC_CACHE_SAVE

###############################################################
# Platform-specific C++ compiler settings

case "$ac_cv_cxx_compiler_vendor" in
    gnu)
        AX_CXXFLAGS_GCC_OPTION([-fpermissive])
    ;;
    compaq)
        AX_CXXFLAGS_OSF_OPTION([-tlocal])
    ;;
    sgi)
        AX_CXXFLAGS_IRIX_OPTION([-ptused])
    ;;
    *)
    ;;
esac


###############################################################
# Checks for functions

#
#  It is an error if neither stricmp or strcasecmp are defined.
#
AC_CHECK_FUNCS([stricmp],,[AC_CHECK_FUNCS([strcasecmp],,AC_MSG_ERROR([missing functions]))])

#
# It's an error if these are not defined.
#
AC_CHECK_FUNCS([atexit strchr],,[AC_MSG_ERROR([missing functions])])

#
# It's NOT an error if these are not defined.
#
AC_CHECK_FUNCS([nrand48])

#
# There was some code in utilib that uses _getcwd() from direct.h
# on Windows machines if getcwd() from unistd.h is not available.
# For now we will consider it an error if getcwd() does not exist.
# If this fails on a platform, we will add code to look for _getcwd()
# and use it in the code.  (Modern cygwin and mingw systems seem to
# have getcwd().)
#
AC_CHECK_FUNCS([getcwd],,[AC_MSG_ERROR([missing headers])])

# Notes on time functions:
#  We want getrusage() (sys/resource.h)
#    next choice would be times() 
#       (sys/times.h and requires sysconf(_SC_CLOCK_TICK))
#    last choice would be clock() (time.h)
#
#  We want gettimeofday() (sys/time.h)
#    next choice would be localtime() (time.h)
#    last choice would be ftime (sys/timeb.h)
#
# TODO: the default names are confusing: HAVE_GETRUSAGE, HAVE_TIMES, etc.
#   we really mean USE_GETRUSAGE, USE_TIMES, etc.  We may have them but
#   not define them because we don't want to use them.
#
# TODO: We could replace a missing "floor()" fuction.

AC_CHECK_FUNCS([sysconf])

AC_CHECK_FUNCS([getrusage],,[AC_CHECK_FUNCS([times sysconf],,[AC_CHECK_FUNCS([clock],,[AC_MSG_ERROR([no process time usage functions])])])])
AC_CHECK_FUNCS([gettimeofday],,[AC_CHECK_FUNCS([localtime],,[AC_CHECK_FUNCS([ftime],,[AC_MSG_ERROR([no time functions])])])])

AC_CHECK_LIB([m], [sqrt],,[AC_MSG_ERROR([cannot find sqrt in math library])])
AC_CHECK_LIB([m], [floor],,[AC_MSG_ERROR([cannot find floor in math library])])
AC_CHECK_LIB([m], [pow],,[AC_MSG_ERROR([cannot find pow in math library])])
AC_CHECK_LIB([m], [lround], [AC_DEFINE([HAVE_LROUND],,[define whether libm contains lround()])])

AC_LIBTOOL_WIN32_DLL
AC_DISABLE_SHARED
AC_PROG_LIBTOOL

if test "X$enable_shared" = "Xyes"; then
  AM_CONDITIONAL(BUILD_SHARED, true)
else
  AM_CONDITIONAL(BUILD_SHARED, false)
fi

if test "X$enable_static" = "Xyes"; then
  AM_CONDITIONAL(BUILD_STATIC, true)
else
  AM_CONDITIONAL(BUILD_STATIC, false)
fi
AC_CACHE_SAVE

###############################################################
# output

AC_CONFIG_FILES([
Makefile
doc/Makefile
src/Makefile
examples/Makefile
test/Makefile
test/studies/Makefile
test/unit/Makefile
])

###############################################################
# We are all done with actions which modify the compilers
# and build flags.  The following definitions are required
# in case the -C or --cache-file= options were given, and
# there was no existing cache file, so we created the
# compile environment variables from our command line options 
# and defaults.
#
# These definitions will be written to the new cache file.

if test $use_ac_cv_env = yes && test $ac_cv_env_empty = yes ; then
  ac_cv_env_CCASFLAGS_value=$CCASFLAGS
  ac_cv_env_CCASFLAGS_set=set
  ac_cv_env_CCAS_value=$CCAS
  ac_cv_env_CCAS_set=set
  ac_cv_env_CC_value=$CC
  ac_cv_env_CC_set=set
  ac_cv_env_CFLAGS_value=$CFLAGS
  ac_cv_env_CFLAGS_set=set
  ac_cv_env_CPPFLAGS_value=$CPPFLAGS
  ac_cv_env_CPPFLAGS_set=set
  ac_cv_env_CPP_value=$CPP
  ac_cv_env_CPP_set=set
  ac_cv_env_CXXCPP_value=$CXXCPP
  ac_cv_env_CXXCPP_set=set
  ac_cv_env_CXXFLAGS_value=$CXXFLAGS
  ac_cv_env_CXXFLAGS_set=set
  ac_cv_env_CXX_value=$CXX
  ac_cv_env_CXX_set=set
  ac_cv_env_LDFLAGS_value=$LDFLAGS
  ac_cv_env_LDFLAGS_set=set
  ac_cv_env_LIBS_value=$LIBS
  ac_cv_env_LIBS_set=set
fi
###############################################################

AC_OUTPUT

if test $use_ac_cv_env = yes && test $ac_cv_env_empty = yes ; then
  AC_MSG_WARN([ ============== COMPILE ENVIRONMENT ============== ])
fi

AC_MSG_NOTICE(CCAS=\"$CCAS\" CCASFLAGS=\"$CCASFLAGS\")
AC_MSG_NOTICE(CXXCPP=\"$CXXCPP\" CC=\"$CC\" CFLAGS=\"$CFLAGS\")
AC_MSG_NOTICE(CPP=\"$CPP\" CPPFLAGS=\"$CPPFLAGS\")
AC_MSG_NOTICE(CXX=\"$CXX\" CXXFLAGS=\"$CXXFLAGS\")
AC_MSG_NOTICE(LDFLAGS=\"$LDFLAGS\" LIBS=\"$LIBS\")

if test $use_ac_cv_env = yes && test $ac_cv_env_empty = yes ; then
  AC_MSG_WARN([ ================================================= ])
  AC_MSG_WARN([ In subsequent configure runs that use the "-C" or ])
  AC_MSG_WARN([ "--cache-file=" options, you must provide the ])
  AC_MSG_WARN([ compile environment on the configure command line ])
  AC_MSG_WARN([ using the above flags. ])
if test $using_acro_special = yes ; then
  AC_MSG_WARN([ The special UTILIB options (like "--with-debugging" ])
  AC_MSG_WARN([ or "--with-cc=") are not compatible with ])
  AC_MSG_WARN([ GNU autoconf's cache variable feature.])
fi
  AC_MSG_WARN([ ================================================= ])
fi

echo
echo "---"
echo "--- Thank you for downloading UTILIB. For more information"
echo "--- visit: http://software.sandia.gov/utilib/"
echo "---"
echo

